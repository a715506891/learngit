#创建项目

django-admin startproject project_name
django-admin startproject myprojiect
#有时使用django-admin 替换 django-admin.py

#创建app
python manage.py startapp app_name
python manage.py startapp echars


#管理员

python manage.py createsuperuser
 
 
# 改变密码
python manage.py changepassword username

#运行
cd C:\Users\Administrator\Desktop\django\sanguanhe
cd C:\Users\Administrator\Desktop\django\work\houtai
python manage.py runserver

#更改服务器端口
python manage.py runserver 8080

#你可以告诉服务器–允许非本地连接访问
python manage.py runserver 0.0.0.0:8000

#数据访问
python manage.py makemigrations books    #用来检测数据库变更和生成数据库迁移文件

python manage.py migrate     #用来迁移数据库

python manage.py sqlmigrate books 0001 # 用来把数据库迁移文件转换成数据库语言

#Django配置启用Python交互解释器的一种方法
python manage.py shell

#将已有数据结构导入app的models.py，（由于位置问题，备份项目到别的文件去进行，单独考出需要表格的代码）
python manage.py inspectdb > appname/models.py
python manage.py inspectdb > myapp/models.py
#查看已有数据结构
 python manage.py inspectdb


git

然后尝试提交：

$ git add 基本命令.txt
$ git commit -m "增加基本命令"

查看版本
$ git log --pretty=oneline

回滚版本
git reset --hard HEAD^

找回版本
git reset --hard 3628164

要关联一个远程库，使用命令
git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令
git push -u origin master

第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令
git push origin master

推送最新修改



Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

Creating a new branch is quick AND simple.

